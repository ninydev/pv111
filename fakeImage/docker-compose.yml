version: '3'
services:

  # Контейнер для обмена сообщениями между микросервисами
  rabbit.mq:
    image: rabbitmq:3.12.0-management-alpine
    env_file:
      - .env
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - pv111


  # Контейнер используется для агрегации сообщений по WebSocket протоколу
  redis.sockets:
    image: 'redis:alpine'
    volumes:
      - './volumes/db/redis/sockets:/data'
    networks:
      - pv111

  # Принимает все уведомления и решает - куда какое отсылать
  notifications.router:
    container_name: notifications.router
    build: ./notifications/notification_router
    volumes:
      - ./notifications/notification_router/src:/usr/src/app
    command: sh -c " npm install && npm start "
    env_file:
      - .env
    depends_on:
      - rabbit.mq
      - redis.sockets
    networks:
      - pv111

  notifications.email:
    container_name: notifications.email
    build: ./notifications/email
    volumes:
      - ./notifications/email/src:/usr/src/app
    command: sh -c " npm install && npm start "
    env_file:
      - .env
    networks:
      - pv111

  # Контейнер для обмена сообщениями по WebSocket соединению
  socket.jonny:
    build: ./notifications/websocket
    volumes:
      - ./notifications/websocket/src:/usr/src/app
    command: sh -c " npm install && npm start "
    container_name: socket.jonny
    environment:
      - SERVER_NAME=SocketJonny
      - SERVER_PORT=80
    env_file:
      - .env
    networks:
      - pv111

  # Роутер запросов к API
  api.getway:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - rabbit.mq
      - socket.jonny
      - front.public
    networks:
      - pv111

# -------------------------------------------------------------------
# Программные контейнеры
# -------------------------------------------------------------------

  front.public:
    build: ./frontend/public
    volumes:
      - ./frontend/public:/usr/src/app
    command: sh -c " npm install && npm start "
    networks:
      - pv111


  api.fake_image:
    build: backend/api/fake_image
    volumes:
      - ./backend/api/fake_image/src:/usr/src/app
    command: sh -c " npm install && npm start "
    container_name: api.fake_image
    env_file:
      - .env
    networks:
      - pv111

networks:
  pv111:
    driver: bridge
